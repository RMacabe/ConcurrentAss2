//Server
package SubsequenceProgram;

import java.net.ServerSocket;
import java.net.Socket;
import java.io.*;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


public class SubsequenceProgramIterativeServer {

    public static void main(String[] args) {
        // determine if port to listen on is specified by user else use default
        int portNumber = 4444; // default port number
        if (args.length == 1) {
            portNumber = Integer.parseInt(args[0]); // user specified port number
        }
        System.out.println("Server Started");
        int clientIdNumber = 0;
        int n = 0;
        
        // Read the Integer List from the client
        List<Integer> numberList = new ArrayList<>();
        // create serverSocket to listen on	
        try (ServerSocket serverSocket = new ServerSocket(portNumber)) {
            //while(true) {
                // accept client connection
                Socket clientSocket = serverSocket.accept();
                try (//BufferedReader is = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                        Scanner input = new Scanner (new InputStreamReader(clientSocket.getInputStream()));
                       // ObjectInputStream is = new ObjectInputStream(new BufferedInputStream(clientSocket.getInputStream()));
                        PrintWriter os = new PrintWriter(new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream())))) {
                    System.out.println("Client Accepted");
                    clientIdNumber++; // give id number to connecting client
            while(n != -1) { 
                n = input.nextInt();
                               
                    System.out.println("Client:" + clientIdNumber + "Integer List: " + numberList);
                    //+ " Integer List = " + );
                      //add numbers
                      numberList.add(n);
                                  
                // decide server response
                   System.out.println ("Number List: " + numberList); 
                   os.println(numberList);
                   
                    System.out.println(numberList.toString());
                    System.out.println("Length of longest Consecutive Sequence = " + numberList);
                    os.println(numberList);
                    os.flush();
                    System.out.println("Session Over");
   
               // } catch (IOException e) {
                    //System.out.println("IOException:" + e.getMessage());
                }
            } // end while true
        } catch (Exception e) {
            System.out.println("Exception:" + e.getMessage());
        } // end catch
    } // end main
   
    } 
    



