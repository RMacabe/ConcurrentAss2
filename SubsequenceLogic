//Subsequence Logic separate from core functionality
    package subsequenceprogram;

// Returns length of the longest consecutive subsequence 

import java.util.HashSet;
import java.util.List;

   public class SubsequenceLogic 
{ 
    // Returns length of the longest consecutive subsequence 
    public int findLongestConseqSubseq(List<Integer> numberList) {
    
        HashSet<Integer> S = new HashSet<>(); 
        int ans = 0; 
  
        // Hash all the array elements 
        for (int i=0; i<numberList.size(); ++i) 
            S.add(numberList.get(i)); 
  
        // check each possible sequence from the start 
        // then update optimal length 
        for (int i=0; i<numberList.size(); ++i) 
        { 
            // if current element is the starting 
            // element of a sequence 
            if (!S.contains(numberList.get(i)-1)) 
            { 
                // Then check for next elements in the 
                // sequence 
                int j = numberList.get(i); 
                while (S.contains(j)) 
                    j++; 
  
                // update  optimal length if this length 
                // is more 
                if (ans<j-numberList.get(i)) 
                    ans = j-numberList.get(i); 
            } 
        } 
        return ans;
                
    } 
    
   }
